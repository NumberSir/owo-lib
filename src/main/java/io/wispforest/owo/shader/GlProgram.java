package io.wispforest.owo.shader;

import com.mojang.blaze3d.systems.RenderSystem;
import io.wispforest.owo.mixin.shader.ShaderProgramAccessor;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gl.*;
import net.minecraft.client.render.RenderPhase;
import net.minecraft.client.render.VertexFormat;
import net.minecraft.util.Identifier;
import org.jetbrains.annotations.ApiStatus;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

/**
 * A simple wrapper around Minecraft's built-in core shaders. In order to load and use
 * a custom shader from your resources, place it in {@code assets/<mod id>/shaders/core/}.
 * You can look up the required files and their format on <a href="https://minecraft.fandom.com/wiki/Shaders">the Minecraft Wiki</a>
 * <p>
 * This wrapper fully supports custom uniforms. If you require any, extend this class, then grab the
 * uniforms via {@link #findUniform(String)} inside your {@link #setup()} override and store them in
 * fields. This method gets executed once the actual shader program has been compiled and
 * linked, ready for use. Look at {@link BlurProgram} for reference
 * <p>
 * GlPrograms automatically register themselves for loading in the constructor - as such,
 * some caution on when and where the constructor is invoked is advisable. Ideally, store
 * and initialize programs in static fields of your client initializer
 */
public class GlProgram {

    private static final List<Runnable> REGISTERED_PROGRAMS = new ArrayList<>();

    /**
     * The actual Minecraft shader program
     * which is represented and wrapped by this
     * GlProgram instance
     */
    protected ShaderProgram backingProgram;

    protected ShaderProgramKey programKey;

    public GlProgram(Identifier id, VertexFormat vertexFormat) {
        this.programKey = new ShaderProgramKey(id.withPrefixedPath("core/"), vertexFormat, Defines.EMPTY);

        REGISTERED_PROGRAMS.add(
                () -> {
                    try {
                        this.backingProgram = MinecraftClient.getInstance().getShaderLoader().getProgramToLoad(programKey);
                        this.setup();
                    } catch (ShaderLoader.LoadException e) {
                        throw new RuntimeException("Failed to initialized owo shader program", e);
                    }
                }
        );
    }

    public RenderPhase.ShaderProgram renderPhaseProgram() {
        return new RenderPhase.ShaderProgram(programKey);
    }

    /**
     * Bind this program and execute
     * potential preparation work
     * <p>
     * <b>Note:</b> Custom implementations may very well have
     * additional setup methods that must be run prior to
     * invoking {@code use()}
     */
    public void use() {
        RenderSystem.setShader(this.programKey);
    }

    protected void setup() {}

    /**
     * Get the {@link GlUniform} generated by the game for
     * the uniform of the given name
     *
     * @return The corresponding {@link GlUniform} instance for updating
     * the value of the uniform, or {@code null} if no such uniform exists
     */
    protected @Nullable GlUniform findUniform(String name) {
        return ((ShaderProgramAccessor) this.backingProgram).owo$getUniformsByName().get(name);
    }

    @ApiStatus.Internal
    public static void loadAndSetupPrograms() {
        REGISTERED_PROGRAMS.forEach(Runnable::run);
    }
}
